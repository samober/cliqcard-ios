//
//  CCAddress.m
//  Autogenerated by plank
//
//  DO NOT EDIT - EDITS WILL BE OVERWRITTEN
//  @generated
//

#import "CCAddress.h"

struct CCAddressDirtyProperties {
    unsigned int CCAddressDirtyPropertyCity:1;
    unsigned int CCAddressDirtyPropertyCountry:1;
    unsigned int CCAddressDirtyPropertyState:1;
    unsigned int CCAddressDirtyPropertyStreet1:1;
    unsigned int CCAddressDirtyPropertyStreet2:1;
    unsigned int CCAddressDirtyPropertyZip:1;
};

@interface CCAddress ()
@property (nonatomic, assign, readwrite) struct CCAddressDirtyProperties addressDirtyProperties;
@end

@interface CCAddressBuilder ()
@property (nonatomic, assign, readwrite) struct CCAddressDirtyProperties addressDirtyProperties;
@end

@implementation CCAddress
+ (NSString *)className
{
    return @"CCAddress";
}
+ (NSString *)polymorphicTypeIdentifier
{
    return @"address";
}
+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dictionary
{
    return [[self alloc] initWithModelDictionary:dictionary];
}
- (instancetype)init
{
    return [self initWithModelDictionary:@{}];
}
- (instancetype)initWithModelDictionary:(NS_VALID_UNTIL_END_OF_SCOPE NSDictionary *)modelDictionary
{
    NSParameterAssert(modelDictionary);
    if (!modelDictionary) {
        return self;
    }
    if (!(self = [super init])) {
        return self;
    }
        {
            __unsafe_unretained id value = modelDictionary[@"city"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_city = [value copy];
                }
                self->_addressDirtyProperties.CCAddressDirtyPropertyCity = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"country"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_country = [value copy];
                }
                self->_addressDirtyProperties.CCAddressDirtyPropertyCountry = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"state"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_state = [value copy];
                }
                self->_addressDirtyProperties.CCAddressDirtyPropertyState = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"street1"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_street1 = [value copy];
                }
                self->_addressDirtyProperties.CCAddressDirtyPropertyStreet1 = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"street2"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_street2 = [value copy];
                }
                self->_addressDirtyProperties.CCAddressDirtyPropertyStreet2 = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"zip"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_zip = [value copy];
                }
                self->_addressDirtyProperties.CCAddressDirtyPropertyZip = 1;
            }
        }
    if ([self class] == [CCAddress class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(PlankModelInitTypeDefault) }];
    }
    return self;
}
- (instancetype)initWithBuilder:(CCAddressBuilder *)builder
{
    NSParameterAssert(builder);
    return [self initWithBuilder:builder initType:PlankModelInitTypeDefault];
}
- (instancetype)initWithBuilder:(CCAddressBuilder *)builder initType:(PlankModelInitType)initType
{
    NSParameterAssert(builder);
    if (!(self = [super init])) {
        return self;
    }
    _city = builder.city;
    _country = builder.country;
    _state = builder.state;
    _street1 = builder.street1;
    _street2 = builder.street2;
    _zip = builder.zip;
    _addressDirtyProperties = builder.addressDirtyProperties;
    if ([self class] == [CCAddress class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(initType) }];
    }
    return self;
}
- (NSString *)debugDescription
{
    NSArray<NSString *> *parentDebugDescription = [[super debugDescription] componentsSeparatedByString:@"\n"];
    NSMutableArray *descriptionFields = [NSMutableArray arrayWithCapacity:6];
    [descriptionFields addObject:parentDebugDescription];
    struct CCAddressDirtyProperties props = _addressDirtyProperties;
    if (props.CCAddressDirtyPropertyCity) {
        [descriptionFields addObject:[@"_city = " stringByAppendingFormat:@"%@", _city]];
    }
    if (props.CCAddressDirtyPropertyCountry) {
        [descriptionFields addObject:[@"_country = " stringByAppendingFormat:@"%@", _country]];
    }
    if (props.CCAddressDirtyPropertyState) {
        [descriptionFields addObject:[@"_state = " stringByAppendingFormat:@"%@", _state]];
    }
    if (props.CCAddressDirtyPropertyStreet1) {
        [descriptionFields addObject:[@"_street1 = " stringByAppendingFormat:@"%@", _street1]];
    }
    if (props.CCAddressDirtyPropertyStreet2) {
        [descriptionFields addObject:[@"_street2 = " stringByAppendingFormat:@"%@", _street2]];
    }
    if (props.CCAddressDirtyPropertyZip) {
        [descriptionFields addObject:[@"_zip = " stringByAppendingFormat:@"%@", _zip]];
    }
    return [NSString stringWithFormat:@"CCAddress = {\n%@\n}", debugDescriptionForFields(descriptionFields)];
}
- (instancetype)copyWithBlock:(PLANK_NOESCAPE void (^)(CCAddressBuilder *builder))block
{
    NSParameterAssert(block);
    CCAddressBuilder *builder = [[CCAddressBuilder alloc] initWithModel:self];
    block(builder);
    return [builder build];
}
- (BOOL)isEqual:(id)anObject
{
    if (self == anObject) {
        return YES;
    }
    if ([anObject isKindOfClass:[CCAddress class]] == NO) {
        return NO;
    }
    return [self isEqualToAddress:anObject];
}
- (BOOL)isEqualToAddress:(CCAddress *)anObject
{
    return (
        (anObject != nil) &&
        (_city == anObject.city || [_city isEqualToString:anObject.city]) &&
        (_country == anObject.country || [_country isEqualToString:anObject.country]) &&
        (_state == anObject.state || [_state isEqualToString:anObject.state]) &&
        (_street1 == anObject.street1 || [_street1 isEqualToString:anObject.street1]) &&
        (_street2 == anObject.street2 || [_street2 isEqualToString:anObject.street2]) &&
        (_zip == anObject.zip || [_zip isEqualToString:anObject.zip])
    );
}
- (NSUInteger)hash
{
    NSUInteger subhashes[] = {
        17,
        [_city hash],
        [_country hash],
        [_state hash],
        [_street1 hash],
        [_street2 hash],
        [_zip hash]
    };
    return PINIntegerArrayHash(subhashes, sizeof(subhashes) / sizeof(subhashes[0]));
}
- (instancetype)mergeWithModel:(CCAddress *)modelObject
{
    return [self mergeWithModel:modelObject initType:PlankModelInitTypeFromMerge];
}
- (instancetype)mergeWithModel:(CCAddress *)modelObject initType:(PlankModelInitType)initType
{
    NSParameterAssert(modelObject);
    CCAddressBuilder *builder = [[CCAddressBuilder alloc] initWithModel:self];
    [builder mergeWithModel:modelObject];
    return [[CCAddress alloc] initWithBuilder:builder initType:initType];
}
- (NSDictionary *)dictionaryObjectRepresentation
{
    NSMutableDictionary *dict = [[NSMutableDictionary alloc] initWithCapacity:6];
    if (_addressDirtyProperties.CCAddressDirtyPropertyCity) {
        if (_city != (id)kCFNull) {
            [dict setObject:_city forKey:@"city"];
        } else {
            [dict setObject:[NSNull null] forKey:@"city"];
        }
    }
    if (_addressDirtyProperties.CCAddressDirtyPropertyCountry) {
        if (_country != (id)kCFNull) {
            [dict setObject:_country forKey:@"country"];
        } else {
            [dict setObject:[NSNull null] forKey:@"country"];
        }
    }
    if (_addressDirtyProperties.CCAddressDirtyPropertyState) {
        if (_state != (id)kCFNull) {
            [dict setObject:_state forKey:@"state"];
        } else {
            [dict setObject:[NSNull null] forKey:@"state"];
        }
    }
    if (_addressDirtyProperties.CCAddressDirtyPropertyStreet1) {
        if (_street1 != (id)kCFNull) {
            [dict setObject:_street1 forKey:@"street1"];
        } else {
            [dict setObject:[NSNull null] forKey:@"street1"];
        }
    }
    if (_addressDirtyProperties.CCAddressDirtyPropertyStreet2) {
        if (_street2 != (id)kCFNull) {
            [dict setObject:_street2 forKey:@"street2"];
        } else {
            [dict setObject:[NSNull null] forKey:@"street2"];
        }
    }
    if (_addressDirtyProperties.CCAddressDirtyPropertyZip) {
        if (_zip != (id)kCFNull) {
            [dict setObject:_zip forKey:@"zip"];
        } else {
            [dict setObject:[NSNull null] forKey:@"zip"];
        }
    }
    return dict;
}
#pragma mark - NSCopying
- (id)copyWithZone:(NSZone *)zone
{
    return self;
}
#pragma mark - NSSecureCoding
+ (BOOL)supportsSecureCoding
{
    return YES;
}
- (instancetype)initWithCoder:(NSCoder *)aDecoder
{
    if (!(self = [super init])) {
        return self;
    }
    _city = [aDecoder decodeObjectOfClass:[NSString class] forKey:@"city"];
    _country = [aDecoder decodeObjectOfClass:[NSString class] forKey:@"country"];
    _state = [aDecoder decodeObjectOfClass:[NSString class] forKey:@"state"];
    _street1 = [aDecoder decodeObjectOfClass:[NSString class] forKey:@"street1"];
    _street2 = [aDecoder decodeObjectOfClass:[NSString class] forKey:@"street2"];
    _zip = [aDecoder decodeObjectOfClass:[NSString class] forKey:@"zip"];
    _addressDirtyProperties.CCAddressDirtyPropertyCity = [aDecoder decodeIntForKey:@"city_dirty_property"] & 0x1;
    _addressDirtyProperties.CCAddressDirtyPropertyCountry = [aDecoder decodeIntForKey:@"country_dirty_property"] & 0x1;
    _addressDirtyProperties.CCAddressDirtyPropertyState = [aDecoder decodeIntForKey:@"state_dirty_property"] & 0x1;
    _addressDirtyProperties.CCAddressDirtyPropertyStreet1 = [aDecoder decodeIntForKey:@"street1_dirty_property"] & 0x1;
    _addressDirtyProperties.CCAddressDirtyPropertyStreet2 = [aDecoder decodeIntForKey:@"street2_dirty_property"] & 0x1;
    _addressDirtyProperties.CCAddressDirtyPropertyZip = [aDecoder decodeIntForKey:@"zip_dirty_property"] & 0x1;
    if ([self class] == [CCAddress class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(PlankModelInitTypeDefault) }];
    }
    return self;
}
- (void)encodeWithCoder:(NSCoder *)aCoder
{
    [aCoder encodeObject:self.city forKey:@"city"];
    [aCoder encodeObject:self.country forKey:@"country"];
    [aCoder encodeObject:self.state forKey:@"state"];
    [aCoder encodeObject:self.street1 forKey:@"street1"];
    [aCoder encodeObject:self.street2 forKey:@"street2"];
    [aCoder encodeObject:self.zip forKey:@"zip"];
    [aCoder encodeInt:_addressDirtyProperties.CCAddressDirtyPropertyCity forKey:@"city_dirty_property"];
    [aCoder encodeInt:_addressDirtyProperties.CCAddressDirtyPropertyCountry forKey:@"country_dirty_property"];
    [aCoder encodeInt:_addressDirtyProperties.CCAddressDirtyPropertyState forKey:@"state_dirty_property"];
    [aCoder encodeInt:_addressDirtyProperties.CCAddressDirtyPropertyStreet1 forKey:@"street1_dirty_property"];
    [aCoder encodeInt:_addressDirtyProperties.CCAddressDirtyPropertyStreet2 forKey:@"street2_dirty_property"];
    [aCoder encodeInt:_addressDirtyProperties.CCAddressDirtyPropertyZip forKey:@"zip_dirty_property"];
}
@end

@implementation CCAddressBuilder
- (instancetype)initWithModel:(CCAddress *)modelObject
{
    NSParameterAssert(modelObject);
    if (!(self = [super init])) {
        return self;
    }
    struct CCAddressDirtyProperties addressDirtyProperties = modelObject.addressDirtyProperties;
    if (addressDirtyProperties.CCAddressDirtyPropertyCity) {
        _city = modelObject.city;
    }
    if (addressDirtyProperties.CCAddressDirtyPropertyCountry) {
        _country = modelObject.country;
    }
    if (addressDirtyProperties.CCAddressDirtyPropertyState) {
        _state = modelObject.state;
    }
    if (addressDirtyProperties.CCAddressDirtyPropertyStreet1) {
        _street1 = modelObject.street1;
    }
    if (addressDirtyProperties.CCAddressDirtyPropertyStreet2) {
        _street2 = modelObject.street2;
    }
    if (addressDirtyProperties.CCAddressDirtyPropertyZip) {
        _zip = modelObject.zip;
    }
    _addressDirtyProperties = addressDirtyProperties;
    return self;
}
- (CCAddress *)build
{
    return [[CCAddress alloc] initWithBuilder:self];
}
- (void)mergeWithModel:(CCAddress *)modelObject
{
    NSParameterAssert(modelObject);
    CCAddressBuilder *builder = self;
    if (modelObject.addressDirtyProperties.CCAddressDirtyPropertyCity) {
        builder.city = modelObject.city;
    }
    if (modelObject.addressDirtyProperties.CCAddressDirtyPropertyCountry) {
        builder.country = modelObject.country;
    }
    if (modelObject.addressDirtyProperties.CCAddressDirtyPropertyState) {
        builder.state = modelObject.state;
    }
    if (modelObject.addressDirtyProperties.CCAddressDirtyPropertyStreet1) {
        builder.street1 = modelObject.street1;
    }
    if (modelObject.addressDirtyProperties.CCAddressDirtyPropertyStreet2) {
        builder.street2 = modelObject.street2;
    }
    if (modelObject.addressDirtyProperties.CCAddressDirtyPropertyZip) {
        builder.zip = modelObject.zip;
    }
}
- (void)setCity:(NSString *)city
{
    _city = [city copy];
    _addressDirtyProperties.CCAddressDirtyPropertyCity = 1;
}
- (void)setCountry:(NSString *)country
{
    _country = [country copy];
    _addressDirtyProperties.CCAddressDirtyPropertyCountry = 1;
}
- (void)setState:(NSString *)state
{
    _state = [state copy];
    _addressDirtyProperties.CCAddressDirtyPropertyState = 1;
}
- (void)setStreet1:(NSString *)street1
{
    _street1 = [street1 copy];
    _addressDirtyProperties.CCAddressDirtyPropertyStreet1 = 1;
}
- (void)setStreet2:(NSString *)street2
{
    _street2 = [street2 copy];
    _addressDirtyProperties.CCAddressDirtyPropertyStreet2 = 1;
}
- (void)setZip:(NSString *)zip
{
    _zip = [zip copy];
    _addressDirtyProperties.CCAddressDirtyPropertyZip = 1;
}
@end
