//
//  CCUser.m
//  Autogenerated by plank
//
//  DO NOT EDIT - EDITS WILL BE OVERWRITTEN
//  @generated
//

#import "CCProfilePicture.h"
#import "CCUser.h"

struct CCUserDirtyProperties {
    unsigned int CCUserDirtyPropertyCreatedAt:1;
    unsigned int CCUserDirtyPropertyFirstName:1;
    unsigned int CCUserDirtyPropertyFullName:1;
    unsigned int CCUserDirtyPropertyIdentifier:1;
    unsigned int CCUserDirtyPropertyLastName:1;
    unsigned int CCUserDirtyPropertyProfilePicture:1;
    unsigned int CCUserDirtyPropertyUpdatedAt:1;
};

@interface CCUser ()
@property (nonatomic, assign, readwrite) struct CCUserDirtyProperties userDirtyProperties;
@end

@interface CCUserBuilder ()
@property (nonatomic, assign, readwrite) struct CCUserDirtyProperties userDirtyProperties;
@end

@implementation CCUser
+ (NSString *)className
{
    return @"CCUser";
}
+ (NSString *)polymorphicTypeIdentifier
{
    return @"user";
}
+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dictionary
{
    return [[self alloc] initWithModelDictionary:dictionary];
}
- (instancetype)init
{
    return [self initWithModelDictionary:@{}];
}
- (instancetype)initWithModelDictionary:(NS_VALID_UNTIL_END_OF_SCOPE NSDictionary *)modelDictionary
{
    NSParameterAssert(modelDictionary);
    if (!modelDictionary) {
        return self;
    }
    if (!(self = [super init])) {
        return self;
    }
        {
            __unsafe_unretained id value = modelDictionary[@"created_at"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_createdAt = [[NSValueTransformer valueTransformerForName:kPlankDateValueTransformerKey] transformedValue:value];
                }
                self->_userDirtyProperties.CCUserDirtyPropertyCreatedAt = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"first_name"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_firstName = [value copy];
                }
                self->_userDirtyProperties.CCUserDirtyPropertyFirstName = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"full_name"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_fullName = [value copy];
                }
                self->_userDirtyProperties.CCUserDirtyPropertyFullName = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"id"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_identifier = [value integerValue];
                }
                self->_userDirtyProperties.CCUserDirtyPropertyIdentifier = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"last_name"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_lastName = [value copy];
                }
                self->_userDirtyProperties.CCUserDirtyPropertyLastName = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"profile_picture"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_profilePicture = [CCProfilePicture modelObjectWithDictionary:value];
                }
                self->_userDirtyProperties.CCUserDirtyPropertyProfilePicture = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"updated_at"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_updatedAt = [[NSValueTransformer valueTransformerForName:kPlankDateValueTransformerKey] transformedValue:value];
                }
                self->_userDirtyProperties.CCUserDirtyPropertyUpdatedAt = 1;
            }
        }
    if ([self class] == [CCUser class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(PlankModelInitTypeDefault) }];
    }
    return self;
}
- (instancetype)initWithBuilder:(CCUserBuilder *)builder
{
    NSParameterAssert(builder);
    return [self initWithBuilder:builder initType:PlankModelInitTypeDefault];
}
- (instancetype)initWithBuilder:(CCUserBuilder *)builder initType:(PlankModelInitType)initType
{
    NSParameterAssert(builder);
    if (!(self = [super init])) {
        return self;
    }
    _createdAt = builder.createdAt;
    _firstName = builder.firstName;
    _fullName = builder.fullName;
    _identifier = builder.identifier;
    _lastName = builder.lastName;
    _profilePicture = builder.profilePicture;
    _updatedAt = builder.updatedAt;
    _userDirtyProperties = builder.userDirtyProperties;
    if ([self class] == [CCUser class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(initType) }];
    }
    return self;
}
- (NSString *)debugDescription
{
    NSArray<NSString *> *parentDebugDescription = [[super debugDescription] componentsSeparatedByString:@"\n"];
    NSMutableArray *descriptionFields = [NSMutableArray arrayWithCapacity:7];
    [descriptionFields addObject:parentDebugDescription];
    struct CCUserDirtyProperties props = _userDirtyProperties;
    if (props.CCUserDirtyPropertyCreatedAt) {
        [descriptionFields addObject:[@"_createdAt = " stringByAppendingFormat:@"%@", _createdAt]];
    }
    if (props.CCUserDirtyPropertyFirstName) {
        [descriptionFields addObject:[@"_firstName = " stringByAppendingFormat:@"%@", _firstName]];
    }
    if (props.CCUserDirtyPropertyFullName) {
        [descriptionFields addObject:[@"_fullName = " stringByAppendingFormat:@"%@", _fullName]];
    }
    if (props.CCUserDirtyPropertyIdentifier) {
        [descriptionFields addObject:[@"_identifier = " stringByAppendingFormat:@"%@", @(_identifier)]];
    }
    if (props.CCUserDirtyPropertyLastName) {
        [descriptionFields addObject:[@"_lastName = " stringByAppendingFormat:@"%@", _lastName]];
    }
    if (props.CCUserDirtyPropertyProfilePicture) {
        [descriptionFields addObject:[@"_profilePicture = " stringByAppendingFormat:@"%@", _profilePicture]];
    }
    if (props.CCUserDirtyPropertyUpdatedAt) {
        [descriptionFields addObject:[@"_updatedAt = " stringByAppendingFormat:@"%@", _updatedAt]];
    }
    return [NSString stringWithFormat:@"CCUser = {\n%@\n}", debugDescriptionForFields(descriptionFields)];
}
- (instancetype)copyWithBlock:(PLANK_NOESCAPE void (^)(CCUserBuilder *builder))block
{
    NSParameterAssert(block);
    CCUserBuilder *builder = [[CCUserBuilder alloc] initWithModel:self];
    block(builder);
    return [builder build];
}
- (BOOL)isEqual:(id)anObject
{
    if (self == anObject) {
        return YES;
    }
    if ([anObject isKindOfClass:[CCUser class]] == NO) {
        return NO;
    }
    return [self isEqualToUser:anObject];
}
- (BOOL)isEqualToUser:(CCUser *)anObject
{
    return (
        (anObject != nil) &&
        (_identifier == anObject.identifier) &&
        (_createdAt == anObject.createdAt || [_createdAt isEqualToDate:anObject.createdAt]) &&
        (_firstName == anObject.firstName || [_firstName isEqualToString:anObject.firstName]) &&
        (_fullName == anObject.fullName || [_fullName isEqualToString:anObject.fullName]) &&
        (_lastName == anObject.lastName || [_lastName isEqualToString:anObject.lastName]) &&
        (_profilePicture == anObject.profilePicture || [_profilePicture isEqual:anObject.profilePicture]) &&
        (_updatedAt == anObject.updatedAt || [_updatedAt isEqualToDate:anObject.updatedAt])
    );
}
- (NSUInteger)hash
{
    NSUInteger subhashes[] = {
        17,
        [_createdAt hash],
        [_firstName hash],
        [_fullName hash],
        (NSUInteger)_identifier,
        [_lastName hash],
        [_profilePicture hash],
        [_updatedAt hash]
    };
    return PINIntegerArrayHash(subhashes, sizeof(subhashes) / sizeof(subhashes[0]));
}
- (instancetype)mergeWithModel:(CCUser *)modelObject
{
    return [self mergeWithModel:modelObject initType:PlankModelInitTypeFromMerge];
}
- (instancetype)mergeWithModel:(CCUser *)modelObject initType:(PlankModelInitType)initType
{
    NSParameterAssert(modelObject);
    CCUserBuilder *builder = [[CCUserBuilder alloc] initWithModel:self];
    [builder mergeWithModel:modelObject];
    return [[CCUser alloc] initWithBuilder:builder initType:initType];
}
- (NSDictionary *)dictionaryObjectRepresentation
{
    NSMutableDictionary *dict = [[NSMutableDictionary alloc] initWithCapacity:7];
    if (_userDirtyProperties.CCUserDirtyPropertyCreatedAt) {
        if (_createdAt != (id)kCFNull) {
            NSValueTransformer *valueTransformer = [NSValueTransformer valueTransformerForName:kPlankDateValueTransformerKey];
            if ([[valueTransformer class] allowsReverseTransformation]) {
                [dict setObject:[valueTransformer reverseTransformedValue:_createdAt] forKey:@"created_at"];
            } else {
                [dict setObject:[NSNull null] forKey:@"created_at"];
            }
        } else {
            [dict setObject:[NSNull null] forKey:@"created_at"];
        }
    }
    if (_userDirtyProperties.CCUserDirtyPropertyFirstName) {
        if (_firstName != (id)kCFNull) {
            [dict setObject:_firstName forKey:@"first_name"];
        } else {
            [dict setObject:[NSNull null] forKey:@"first_name"];
        }
    }
    if (_userDirtyProperties.CCUserDirtyPropertyFullName) {
        if (_fullName != (id)kCFNull) {
            [dict setObject:_fullName forKey:@"full_name"];
        } else {
            [dict setObject:[NSNull null] forKey:@"full_name"];
        }
    }
    if (_userDirtyProperties.CCUserDirtyPropertyIdentifier) {
        [dict setObject:@(_identifier) forKey: @"id"];
    }
    if (_userDirtyProperties.CCUserDirtyPropertyLastName) {
        if (_lastName != (id)kCFNull) {
            [dict setObject:_lastName forKey:@"last_name"];
        } else {
            [dict setObject:[NSNull null] forKey:@"last_name"];
        }
    }
    if (_userDirtyProperties.CCUserDirtyPropertyProfilePicture) {
        if (_profilePicture != (id)kCFNull) {
            [dict setObject:[_profilePicture dictionaryObjectRepresentation] forKey:@"profile_picture"];
        } else {
            [dict setObject:[NSNull null] forKey:@"profile_picture"];
        }
    }
    if (_userDirtyProperties.CCUserDirtyPropertyUpdatedAt) {
        if (_updatedAt != (id)kCFNull) {
            NSValueTransformer *valueTransformer = [NSValueTransformer valueTransformerForName:kPlankDateValueTransformerKey];
            if ([[valueTransformer class] allowsReverseTransformation]) {
                [dict setObject:[valueTransformer reverseTransformedValue:_updatedAt] forKey:@"updated_at"];
            } else {
                [dict setObject:[NSNull null] forKey:@"updated_at"];
            }
        } else {
            [dict setObject:[NSNull null] forKey:@"updated_at"];
        }
    }
    return dict;
}
#pragma mark - NSCopying
- (id)copyWithZone:(NSZone *)zone
{
    return self;
}
#pragma mark - NSSecureCoding
+ (BOOL)supportsSecureCoding
{
    return YES;
}
- (instancetype)initWithCoder:(NSCoder *)aDecoder
{
    if (!(self = [super init])) {
        return self;
    }
    _createdAt = [aDecoder decodeObjectOfClass:[NSDate class] forKey:@"created_at"];
    _firstName = [aDecoder decodeObjectOfClass:[NSString class] forKey:@"first_name"];
    _fullName = [aDecoder decodeObjectOfClass:[NSString class] forKey:@"full_name"];
    _identifier = [aDecoder decodeIntegerForKey:@"id"];
    _lastName = [aDecoder decodeObjectOfClass:[NSString class] forKey:@"last_name"];
    _profilePicture = [aDecoder decodeObjectOfClass:[CCProfilePicture class] forKey:@"profile_picture"];
    _updatedAt = [aDecoder decodeObjectOfClass:[NSDate class] forKey:@"updated_at"];
    _userDirtyProperties.CCUserDirtyPropertyCreatedAt = [aDecoder decodeIntForKey:@"created_at_dirty_property"] & 0x1;
    _userDirtyProperties.CCUserDirtyPropertyFirstName = [aDecoder decodeIntForKey:@"first_name_dirty_property"] & 0x1;
    _userDirtyProperties.CCUserDirtyPropertyFullName = [aDecoder decodeIntForKey:@"full_name_dirty_property"] & 0x1;
    _userDirtyProperties.CCUserDirtyPropertyIdentifier = [aDecoder decodeIntForKey:@"id_dirty_property"] & 0x1;
    _userDirtyProperties.CCUserDirtyPropertyLastName = [aDecoder decodeIntForKey:@"last_name_dirty_property"] & 0x1;
    _userDirtyProperties.CCUserDirtyPropertyProfilePicture = [aDecoder decodeIntForKey:@"profile_picture_dirty_property"] & 0x1;
    _userDirtyProperties.CCUserDirtyPropertyUpdatedAt = [aDecoder decodeIntForKey:@"updated_at_dirty_property"] & 0x1;
    if ([self class] == [CCUser class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(PlankModelInitTypeDefault) }];
    }
    return self;
}
- (void)encodeWithCoder:(NSCoder *)aCoder
{
    [aCoder encodeObject:self.createdAt forKey:@"created_at"];
    [aCoder encodeObject:self.firstName forKey:@"first_name"];
    [aCoder encodeObject:self.fullName forKey:@"full_name"];
    [aCoder encodeInteger:self.identifier forKey:@"id"];
    [aCoder encodeObject:self.lastName forKey:@"last_name"];
    [aCoder encodeObject:self.profilePicture forKey:@"profile_picture"];
    [aCoder encodeObject:self.updatedAt forKey:@"updated_at"];
    [aCoder encodeInt:_userDirtyProperties.CCUserDirtyPropertyCreatedAt forKey:@"created_at_dirty_property"];
    [aCoder encodeInt:_userDirtyProperties.CCUserDirtyPropertyFirstName forKey:@"first_name_dirty_property"];
    [aCoder encodeInt:_userDirtyProperties.CCUserDirtyPropertyFullName forKey:@"full_name_dirty_property"];
    [aCoder encodeInt:_userDirtyProperties.CCUserDirtyPropertyIdentifier forKey:@"id_dirty_property"];
    [aCoder encodeInt:_userDirtyProperties.CCUserDirtyPropertyLastName forKey:@"last_name_dirty_property"];
    [aCoder encodeInt:_userDirtyProperties.CCUserDirtyPropertyProfilePicture forKey:@"profile_picture_dirty_property"];
    [aCoder encodeInt:_userDirtyProperties.CCUserDirtyPropertyUpdatedAt forKey:@"updated_at_dirty_property"];
}
@end

@implementation CCUserBuilder
- (instancetype)initWithModel:(CCUser *)modelObject
{
    NSParameterAssert(modelObject);
    if (!(self = [super init])) {
        return self;
    }
    struct CCUserDirtyProperties userDirtyProperties = modelObject.userDirtyProperties;
    if (userDirtyProperties.CCUserDirtyPropertyCreatedAt) {
        _createdAt = modelObject.createdAt;
    }
    if (userDirtyProperties.CCUserDirtyPropertyFirstName) {
        _firstName = modelObject.firstName;
    }
    if (userDirtyProperties.CCUserDirtyPropertyFullName) {
        _fullName = modelObject.fullName;
    }
    if (userDirtyProperties.CCUserDirtyPropertyIdentifier) {
        _identifier = modelObject.identifier;
    }
    if (userDirtyProperties.CCUserDirtyPropertyLastName) {
        _lastName = modelObject.lastName;
    }
    if (userDirtyProperties.CCUserDirtyPropertyProfilePicture) {
        _profilePicture = modelObject.profilePicture;
    }
    if (userDirtyProperties.CCUserDirtyPropertyUpdatedAt) {
        _updatedAt = modelObject.updatedAt;
    }
    _userDirtyProperties = userDirtyProperties;
    return self;
}
- (CCUser *)build
{
    return [[CCUser alloc] initWithBuilder:self];
}
- (void)mergeWithModel:(CCUser *)modelObject
{
    NSParameterAssert(modelObject);
    CCUserBuilder *builder = self;
    if (modelObject.userDirtyProperties.CCUserDirtyPropertyCreatedAt) {
        builder.createdAt = modelObject.createdAt;
    }
    if (modelObject.userDirtyProperties.CCUserDirtyPropertyFirstName) {
        builder.firstName = modelObject.firstName;
    }
    if (modelObject.userDirtyProperties.CCUserDirtyPropertyFullName) {
        builder.fullName = modelObject.fullName;
    }
    if (modelObject.userDirtyProperties.CCUserDirtyPropertyIdentifier) {
        builder.identifier = modelObject.identifier;
    }
    if (modelObject.userDirtyProperties.CCUserDirtyPropertyLastName) {
        builder.lastName = modelObject.lastName;
    }
    if (modelObject.userDirtyProperties.CCUserDirtyPropertyProfilePicture) {
        id value = modelObject.profilePicture;
        if (value != nil) {
            if (builder.profilePicture) {
                builder.profilePicture = [builder.profilePicture mergeWithModel:value initType:PlankModelInitTypeFromSubmerge];
            } else {
                builder.profilePicture = value;
            }
        } else {
            builder.profilePicture = nil;
        }
    }
    if (modelObject.userDirtyProperties.CCUserDirtyPropertyUpdatedAt) {
        builder.updatedAt = modelObject.updatedAt;
    }
}
- (void)setCreatedAt:(NSDate *)createdAt
{
    _createdAt = [createdAt copy];
    _userDirtyProperties.CCUserDirtyPropertyCreatedAt = 1;
}
- (void)setFirstName:(NSString *)firstName
{
    _firstName = [firstName copy];
    _userDirtyProperties.CCUserDirtyPropertyFirstName = 1;
}
- (void)setFullName:(NSString *)fullName
{
    _fullName = [fullName copy];
    _userDirtyProperties.CCUserDirtyPropertyFullName = 1;
}
- (void)setIdentifier:(NSInteger)identifier
{
    _identifier = identifier;
    _userDirtyProperties.CCUserDirtyPropertyIdentifier = 1;
}
- (void)setLastName:(NSString *)lastName
{
    _lastName = [lastName copy];
    _userDirtyProperties.CCUserDirtyPropertyLastName = 1;
}
- (void)setProfilePicture:(CCProfilePicture *)profilePicture
{
    _profilePicture = profilePicture;
    _userDirtyProperties.CCUserDirtyPropertyProfilePicture = 1;
}
- (void)setUpdatedAt:(NSDate *)updatedAt
{
    _updatedAt = [updatedAt copy];
    _userDirtyProperties.CCUserDirtyPropertyUpdatedAt = 1;
}
@end
