//
//  CCProfilePicture.m
//  Autogenerated by plank
//
//  DO NOT EDIT - EDITS WILL BE OVERWRITTEN
//  @generated
//

#import "CCProfilePicture.h"

struct CCProfilePictureDirtyProperties {
    unsigned int CCProfilePictureDirtyPropertyOriginal:1;
    unsigned int CCProfilePictureDirtyPropertyThumbBig:1;
    unsigned int CCProfilePictureDirtyPropertyThumbMini:1;
    unsigned int CCProfilePictureDirtyPropertyThumbNormal:1;
    unsigned int CCProfilePictureDirtyPropertyThumbSmall:1;
};

@interface CCProfilePicture ()
@property (nonatomic, assign, readwrite) struct CCProfilePictureDirtyProperties profilePictureDirtyProperties;
@end

@interface CCProfilePictureBuilder ()
@property (nonatomic, assign, readwrite) struct CCProfilePictureDirtyProperties profilePictureDirtyProperties;
@end

@implementation CCProfilePicture
+ (NSString *)className
{
    return @"CCProfilePicture";
}
+ (NSString *)polymorphicTypeIdentifier
{
    return @"profile_picture";
}
+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dictionary
{
    return [[self alloc] initWithModelDictionary:dictionary];
}
- (instancetype)init
{
    return [self initWithModelDictionary:@{}];
}
- (instancetype)initWithModelDictionary:(NS_VALID_UNTIL_END_OF_SCOPE NSDictionary *)modelDictionary
{
    NSParameterAssert(modelDictionary);
    if (!modelDictionary) {
        return self;
    }
    if (!(self = [super init])) {
        return self;
    }
        {
            __unsafe_unretained id value = modelDictionary[@"original"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_original = [NSURL URLWithString:value];
                }
                self->_profilePictureDirtyProperties.CCProfilePictureDirtyPropertyOriginal = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"thumb_big"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_thumbBig = [NSURL URLWithString:value];
                }
                self->_profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbBig = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"thumb_mini"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_thumbMini = [NSURL URLWithString:value];
                }
                self->_profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbMini = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"thumb_normal"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_thumbNormal = [NSURL URLWithString:value];
                }
                self->_profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbNormal = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"thumb_small"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_thumbSmall = [NSURL URLWithString:value];
                }
                self->_profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbSmall = 1;
            }
        }
    if ([self class] == [CCProfilePicture class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(PlankModelInitTypeDefault) }];
    }
    return self;
}
- (instancetype)initWithBuilder:(CCProfilePictureBuilder *)builder
{
    NSParameterAssert(builder);
    return [self initWithBuilder:builder initType:PlankModelInitTypeDefault];
}
- (instancetype)initWithBuilder:(CCProfilePictureBuilder *)builder initType:(PlankModelInitType)initType
{
    NSParameterAssert(builder);
    if (!(self = [super init])) {
        return self;
    }
    _original = builder.original;
    _thumbBig = builder.thumbBig;
    _thumbMini = builder.thumbMini;
    _thumbNormal = builder.thumbNormal;
    _thumbSmall = builder.thumbSmall;
    _profilePictureDirtyProperties = builder.profilePictureDirtyProperties;
    if ([self class] == [CCProfilePicture class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(initType) }];
    }
    return self;
}
- (NSString *)debugDescription
{
    NSArray<NSString *> *parentDebugDescription = [[super debugDescription] componentsSeparatedByString:@"\n"];
    NSMutableArray *descriptionFields = [NSMutableArray arrayWithCapacity:5];
    [descriptionFields addObject:parentDebugDescription];
    struct CCProfilePictureDirtyProperties props = _profilePictureDirtyProperties;
    if (props.CCProfilePictureDirtyPropertyOriginal) {
        [descriptionFields addObject:[@"_original = " stringByAppendingFormat:@"%@", _original]];
    }
    if (props.CCProfilePictureDirtyPropertyThumbBig) {
        [descriptionFields addObject:[@"_thumbBig = " stringByAppendingFormat:@"%@", _thumbBig]];
    }
    if (props.CCProfilePictureDirtyPropertyThumbMini) {
        [descriptionFields addObject:[@"_thumbMini = " stringByAppendingFormat:@"%@", _thumbMini]];
    }
    if (props.CCProfilePictureDirtyPropertyThumbNormal) {
        [descriptionFields addObject:[@"_thumbNormal = " stringByAppendingFormat:@"%@", _thumbNormal]];
    }
    if (props.CCProfilePictureDirtyPropertyThumbSmall) {
        [descriptionFields addObject:[@"_thumbSmall = " stringByAppendingFormat:@"%@", _thumbSmall]];
    }
    return [NSString stringWithFormat:@"CCProfilePicture = {\n%@\n}", debugDescriptionForFields(descriptionFields)];
}
- (instancetype)copyWithBlock:(PLANK_NOESCAPE void (^)(CCProfilePictureBuilder *builder))block
{
    NSParameterAssert(block);
    CCProfilePictureBuilder *builder = [[CCProfilePictureBuilder alloc] initWithModel:self];
    block(builder);
    return [builder build];
}
- (BOOL)isEqual:(id)anObject
{
    if (self == anObject) {
        return YES;
    }
    if ([anObject isKindOfClass:[CCProfilePicture class]] == NO) {
        return NO;
    }
    return [self isEqualToProfilePicture:anObject];
}
- (BOOL)isEqualToProfilePicture:(CCProfilePicture *)anObject
{
    return (
        (anObject != nil) &&
        (_original == anObject.original || [_original isEqual:anObject.original]) &&
        (_thumbBig == anObject.thumbBig || [_thumbBig isEqual:anObject.thumbBig]) &&
        (_thumbMini == anObject.thumbMini || [_thumbMini isEqual:anObject.thumbMini]) &&
        (_thumbNormal == anObject.thumbNormal || [_thumbNormal isEqual:anObject.thumbNormal]) &&
        (_thumbSmall == anObject.thumbSmall || [_thumbSmall isEqual:anObject.thumbSmall])
    );
}
- (NSUInteger)hash
{
    NSUInteger subhashes[] = {
        17,
        [_original hash],
        [_thumbBig hash],
        [_thumbMini hash],
        [_thumbNormal hash],
        [_thumbSmall hash]
    };
    return PINIntegerArrayHash(subhashes, sizeof(subhashes) / sizeof(subhashes[0]));
}
- (instancetype)mergeWithModel:(CCProfilePicture *)modelObject
{
    return [self mergeWithModel:modelObject initType:PlankModelInitTypeFromMerge];
}
- (instancetype)mergeWithModel:(CCProfilePicture *)modelObject initType:(PlankModelInitType)initType
{
    NSParameterAssert(modelObject);
    CCProfilePictureBuilder *builder = [[CCProfilePictureBuilder alloc] initWithModel:self];
    [builder mergeWithModel:modelObject];
    return [[CCProfilePicture alloc] initWithBuilder:builder initType:initType];
}
- (NSDictionary *)dictionaryObjectRepresentation
{
    NSMutableDictionary *dict = [[NSMutableDictionary alloc] initWithCapacity:5];
    if (_profilePictureDirtyProperties.CCProfilePictureDirtyPropertyOriginal) {
        if (_original != (id)kCFNull) {
            [dict setObject:[_original absoluteString] forKey:@"original"];
        } else {
            [dict setObject:[NSNull null] forKey:@"original"];
        }
    }
    if (_profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbBig) {
        if (_thumbBig != (id)kCFNull) {
            [dict setObject:[_thumbBig absoluteString] forKey:@"thumb_big"];
        } else {
            [dict setObject:[NSNull null] forKey:@"thumb_big"];
        }
    }
    if (_profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbMini) {
        if (_thumbMini != (id)kCFNull) {
            [dict setObject:[_thumbMini absoluteString] forKey:@"thumb_mini"];
        } else {
            [dict setObject:[NSNull null] forKey:@"thumb_mini"];
        }
    }
    if (_profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbNormal) {
        if (_thumbNormal != (id)kCFNull) {
            [dict setObject:[_thumbNormal absoluteString] forKey:@"thumb_normal"];
        } else {
            [dict setObject:[NSNull null] forKey:@"thumb_normal"];
        }
    }
    if (_profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbSmall) {
        if (_thumbSmall != (id)kCFNull) {
            [dict setObject:[_thumbSmall absoluteString] forKey:@"thumb_small"];
        } else {
            [dict setObject:[NSNull null] forKey:@"thumb_small"];
        }
    }
    return dict;
}
#pragma mark - NSCopying
- (id)copyWithZone:(NSZone *)zone
{
    return self;
}
#pragma mark - NSSecureCoding
+ (BOOL)supportsSecureCoding
{
    return YES;
}
- (instancetype)initWithCoder:(NSCoder *)aDecoder
{
    if (!(self = [super init])) {
        return self;
    }
    _original = [aDecoder decodeObjectOfClass:[NSURL class] forKey:@"original"];
    _thumbBig = [aDecoder decodeObjectOfClass:[NSURL class] forKey:@"thumb_big"];
    _thumbMini = [aDecoder decodeObjectOfClass:[NSURL class] forKey:@"thumb_mini"];
    _thumbNormal = [aDecoder decodeObjectOfClass:[NSURL class] forKey:@"thumb_normal"];
    _thumbSmall = [aDecoder decodeObjectOfClass:[NSURL class] forKey:@"thumb_small"];
    _profilePictureDirtyProperties.CCProfilePictureDirtyPropertyOriginal = [aDecoder decodeIntForKey:@"original_dirty_property"] & 0x1;
    _profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbBig = [aDecoder decodeIntForKey:@"thumb_big_dirty_property"] & 0x1;
    _profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbMini = [aDecoder decodeIntForKey:@"thumb_mini_dirty_property"] & 0x1;
    _profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbNormal = [aDecoder decodeIntForKey:@"thumb_normal_dirty_property"] & 0x1;
    _profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbSmall = [aDecoder decodeIntForKey:@"thumb_small_dirty_property"] & 0x1;
    if ([self class] == [CCProfilePicture class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(PlankModelInitTypeDefault) }];
    }
    return self;
}
- (void)encodeWithCoder:(NSCoder *)aCoder
{
    [aCoder encodeObject:self.original forKey:@"original"];
    [aCoder encodeObject:self.thumbBig forKey:@"thumb_big"];
    [aCoder encodeObject:self.thumbMini forKey:@"thumb_mini"];
    [aCoder encodeObject:self.thumbNormal forKey:@"thumb_normal"];
    [aCoder encodeObject:self.thumbSmall forKey:@"thumb_small"];
    [aCoder encodeInt:_profilePictureDirtyProperties.CCProfilePictureDirtyPropertyOriginal forKey:@"original_dirty_property"];
    [aCoder encodeInt:_profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbBig forKey:@"thumb_big_dirty_property"];
    [aCoder encodeInt:_profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbMini forKey:@"thumb_mini_dirty_property"];
    [aCoder encodeInt:_profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbNormal forKey:@"thumb_normal_dirty_property"];
    [aCoder encodeInt:_profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbSmall forKey:@"thumb_small_dirty_property"];
}
@end

@implementation CCProfilePictureBuilder
- (instancetype)initWithModel:(CCProfilePicture *)modelObject
{
    NSParameterAssert(modelObject);
    if (!(self = [super init])) {
        return self;
    }
    struct CCProfilePictureDirtyProperties profilePictureDirtyProperties = modelObject.profilePictureDirtyProperties;
    if (profilePictureDirtyProperties.CCProfilePictureDirtyPropertyOriginal) {
        _original = modelObject.original;
    }
    if (profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbBig) {
        _thumbBig = modelObject.thumbBig;
    }
    if (profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbMini) {
        _thumbMini = modelObject.thumbMini;
    }
    if (profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbNormal) {
        _thumbNormal = modelObject.thumbNormal;
    }
    if (profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbSmall) {
        _thumbSmall = modelObject.thumbSmall;
    }
    _profilePictureDirtyProperties = profilePictureDirtyProperties;
    return self;
}
- (CCProfilePicture *)build
{
    return [[CCProfilePicture alloc] initWithBuilder:self];
}
- (void)mergeWithModel:(CCProfilePicture *)modelObject
{
    NSParameterAssert(modelObject);
    CCProfilePictureBuilder *builder = self;
    if (modelObject.profilePictureDirtyProperties.CCProfilePictureDirtyPropertyOriginal) {
        builder.original = modelObject.original;
    }
    if (modelObject.profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbBig) {
        builder.thumbBig = modelObject.thumbBig;
    }
    if (modelObject.profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbMini) {
        builder.thumbMini = modelObject.thumbMini;
    }
    if (modelObject.profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbNormal) {
        builder.thumbNormal = modelObject.thumbNormal;
    }
    if (modelObject.profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbSmall) {
        builder.thumbSmall = modelObject.thumbSmall;
    }
}
- (void)setOriginal:(NSURL *)original
{
    _original = [original copy];
    _profilePictureDirtyProperties.CCProfilePictureDirtyPropertyOriginal = 1;
}
- (void)setThumbBig:(NSURL *)thumbBig
{
    _thumbBig = [thumbBig copy];
    _profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbBig = 1;
}
- (void)setThumbMini:(NSURL *)thumbMini
{
    _thumbMini = [thumbMini copy];
    _profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbMini = 1;
}
- (void)setThumbNormal:(NSURL *)thumbNormal
{
    _thumbNormal = [thumbNormal copy];
    _profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbNormal = 1;
}
- (void)setThumbSmall:(NSURL *)thumbSmall
{
    _thumbSmall = [thumbSmall copy];
    _profilePictureDirtyProperties.CCProfilePictureDirtyPropertyThumbSmall = 1;
}
@end
