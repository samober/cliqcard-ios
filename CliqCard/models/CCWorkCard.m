//
//  CCWorkCard.m
//  Autogenerated by plank
//
//  DO NOT EDIT - EDITS WILL BE OVERWRITTEN
//  @generated
//

#import "CCAddress.h"
#import "CCWorkCard.h"

struct CCWorkCardDirtyProperties {
    unsigned int CCWorkCardDirtyPropertyAddress:1;
    unsigned int CCWorkCardDirtyPropertyEmail:1;
    unsigned int CCWorkCardDirtyPropertyOfficePhone:1;
};

@interface CCWorkCard ()
@property (nonatomic, assign, readwrite) struct CCWorkCardDirtyProperties workCardDirtyProperties;
@end

@interface CCWorkCardBuilder ()
@property (nonatomic, assign, readwrite) struct CCWorkCardDirtyProperties workCardDirtyProperties;
@end

@implementation CCWorkCard
+ (NSString *)className
{
    return @"CCWorkCard";
}
+ (NSString *)polymorphicTypeIdentifier
{
    return @"work_card";
}
+ (instancetype)modelObjectWithDictionary:(NSDictionary *)dictionary
{
    return [[self alloc] initWithModelDictionary:dictionary];
}
- (instancetype)init
{
    return [self initWithModelDictionary:@{}];
}
- (instancetype)initWithModelDictionary:(NS_VALID_UNTIL_END_OF_SCOPE NSDictionary *)modelDictionary
{
    NSParameterAssert(modelDictionary);
    if (!modelDictionary) {
        return self;
    }
    if (!(self = [super init])) {
        return self;
    }
        {
            __unsafe_unretained id value = modelDictionary[@"address"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_address = [CCAddress modelObjectWithDictionary:value];
                }
                self->_workCardDirtyProperties.CCWorkCardDirtyPropertyAddress = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"email"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_email = [value copy];
                }
                self->_workCardDirtyProperties.CCWorkCardDirtyPropertyEmail = 1;
            }
        }
        {
            __unsafe_unretained id value = modelDictionary[@"office_phone"]; // Collection will retain.
            if (value != nil) {
                if (value != (id)kCFNull) {
                    self->_officePhone = [value copy];
                }
                self->_workCardDirtyProperties.CCWorkCardDirtyPropertyOfficePhone = 1;
            }
        }
    if ([self class] == [CCWorkCard class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(PlankModelInitTypeDefault) }];
    }
    return self;
}
- (instancetype)initWithBuilder:(CCWorkCardBuilder *)builder
{
    NSParameterAssert(builder);
    return [self initWithBuilder:builder initType:PlankModelInitTypeDefault];
}
- (instancetype)initWithBuilder:(CCWorkCardBuilder *)builder initType:(PlankModelInitType)initType
{
    NSParameterAssert(builder);
    if (!(self = [super init])) {
        return self;
    }
    _address = builder.address;
    _email = builder.email;
    _officePhone = builder.officePhone;
    _workCardDirtyProperties = builder.workCardDirtyProperties;
    if ([self class] == [CCWorkCard class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(initType) }];
    }
    return self;
}
- (NSString *)debugDescription
{
    NSArray<NSString *> *parentDebugDescription = [[super debugDescription] componentsSeparatedByString:@"\n"];
    NSMutableArray *descriptionFields = [NSMutableArray arrayWithCapacity:3];
    [descriptionFields addObject:parentDebugDescription];
    struct CCWorkCardDirtyProperties props = _workCardDirtyProperties;
    if (props.CCWorkCardDirtyPropertyAddress) {
        [descriptionFields addObject:[@"_address = " stringByAppendingFormat:@"%@", _address]];
    }
    if (props.CCWorkCardDirtyPropertyEmail) {
        [descriptionFields addObject:[@"_email = " stringByAppendingFormat:@"%@", _email]];
    }
    if (props.CCWorkCardDirtyPropertyOfficePhone) {
        [descriptionFields addObject:[@"_officePhone = " stringByAppendingFormat:@"%@", _officePhone]];
    }
    return [NSString stringWithFormat:@"CCWorkCard = {\n%@\n}", debugDescriptionForFields(descriptionFields)];
}
- (instancetype)copyWithBlock:(PLANK_NOESCAPE void (^)(CCWorkCardBuilder *builder))block
{
    NSParameterAssert(block);
    CCWorkCardBuilder *builder = [[CCWorkCardBuilder alloc] initWithModel:self];
    block(builder);
    return [builder build];
}
- (BOOL)isEqual:(id)anObject
{
    if (self == anObject) {
        return YES;
    }
    if ([anObject isKindOfClass:[CCWorkCard class]] == NO) {
        return NO;
    }
    return [self isEqualToWorkCard:anObject];
}
- (BOOL)isEqualToWorkCard:(CCWorkCard *)anObject
{
    return (
        (anObject != nil) &&
        (_address == anObject.address || [_address isEqual:anObject.address]) &&
        (_email == anObject.email || [_email isEqualToString:anObject.email]) &&
        (_officePhone == anObject.officePhone || [_officePhone isEqualToString:anObject.officePhone])
    );
}
- (NSUInteger)hash
{
    NSUInteger subhashes[] = {
        17,
        [_address hash],
        [_email hash],
        [_officePhone hash]
    };
    return PINIntegerArrayHash(subhashes, sizeof(subhashes) / sizeof(subhashes[0]));
}
- (instancetype)mergeWithModel:(CCWorkCard *)modelObject
{
    return [self mergeWithModel:modelObject initType:PlankModelInitTypeFromMerge];
}
- (instancetype)mergeWithModel:(CCWorkCard *)modelObject initType:(PlankModelInitType)initType
{
    NSParameterAssert(modelObject);
    CCWorkCardBuilder *builder = [[CCWorkCardBuilder alloc] initWithModel:self];
    [builder mergeWithModel:modelObject];
    return [[CCWorkCard alloc] initWithBuilder:builder initType:initType];
}
- (NSDictionary *)dictionaryObjectRepresentation
{
    NSMutableDictionary *dict = [[NSMutableDictionary alloc] initWithCapacity:3];
    if (_workCardDirtyProperties.CCWorkCardDirtyPropertyAddress) {
        if (_address != (id)kCFNull) {
            [dict setObject:[_address dictionaryObjectRepresentation] forKey:@"address"];
        } else {
            [dict setObject:[NSNull null] forKey:@"address"];
        }
    }
    if (_workCardDirtyProperties.CCWorkCardDirtyPropertyEmail) {
        if (_email != (id)kCFNull) {
            [dict setObject:_email forKey:@"email"];
        } else {
            [dict setObject:[NSNull null] forKey:@"email"];
        }
    }
    if (_workCardDirtyProperties.CCWorkCardDirtyPropertyOfficePhone) {
        if (_officePhone != (id)kCFNull) {
            [dict setObject:_officePhone forKey:@"office_phone"];
        } else {
            [dict setObject:[NSNull null] forKey:@"office_phone"];
        }
    }
    return dict;
}
#pragma mark - NSCopying
- (id)copyWithZone:(NSZone *)zone
{
    return self;
}
#pragma mark - NSSecureCoding
+ (BOOL)supportsSecureCoding
{
    return YES;
}
- (instancetype)initWithCoder:(NSCoder *)aDecoder
{
    if (!(self = [super init])) {
        return self;
    }
    _address = [aDecoder decodeObjectOfClass:[CCAddress class] forKey:@"address"];
    _email = [aDecoder decodeObjectOfClass:[NSString class] forKey:@"email"];
    _officePhone = [aDecoder decodeObjectOfClass:[NSString class] forKey:@"office_phone"];
    _workCardDirtyProperties.CCWorkCardDirtyPropertyAddress = [aDecoder decodeIntForKey:@"address_dirty_property"] & 0x1;
    _workCardDirtyProperties.CCWorkCardDirtyPropertyEmail = [aDecoder decodeIntForKey:@"email_dirty_property"] & 0x1;
    _workCardDirtyProperties.CCWorkCardDirtyPropertyOfficePhone = [aDecoder decodeIntForKey:@"office_phone_dirty_property"] & 0x1;
    if ([self class] == [CCWorkCard class]) {
        [[NSNotificationCenter defaultCenter] postNotificationName:kPlankDidInitializeNotification object:self userInfo:@{ kPlankInitTypeKey : @(PlankModelInitTypeDefault) }];
    }
    return self;
}
- (void)encodeWithCoder:(NSCoder *)aCoder
{
    [aCoder encodeObject:self.address forKey:@"address"];
    [aCoder encodeObject:self.email forKey:@"email"];
    [aCoder encodeObject:self.officePhone forKey:@"office_phone"];
    [aCoder encodeInt:_workCardDirtyProperties.CCWorkCardDirtyPropertyAddress forKey:@"address_dirty_property"];
    [aCoder encodeInt:_workCardDirtyProperties.CCWorkCardDirtyPropertyEmail forKey:@"email_dirty_property"];
    [aCoder encodeInt:_workCardDirtyProperties.CCWorkCardDirtyPropertyOfficePhone forKey:@"office_phone_dirty_property"];
}
@end

@implementation CCWorkCardBuilder
- (instancetype)initWithModel:(CCWorkCard *)modelObject
{
    NSParameterAssert(modelObject);
    if (!(self = [super init])) {
        return self;
    }
    struct CCWorkCardDirtyProperties workCardDirtyProperties = modelObject.workCardDirtyProperties;
    if (workCardDirtyProperties.CCWorkCardDirtyPropertyAddress) {
        _address = modelObject.address;
    }
    if (workCardDirtyProperties.CCWorkCardDirtyPropertyEmail) {
        _email = modelObject.email;
    }
    if (workCardDirtyProperties.CCWorkCardDirtyPropertyOfficePhone) {
        _officePhone = modelObject.officePhone;
    }
    _workCardDirtyProperties = workCardDirtyProperties;
    return self;
}
- (CCWorkCard *)build
{
    return [[CCWorkCard alloc] initWithBuilder:self];
}
- (void)mergeWithModel:(CCWorkCard *)modelObject
{
    NSParameterAssert(modelObject);
    CCWorkCardBuilder *builder = self;
    if (modelObject.workCardDirtyProperties.CCWorkCardDirtyPropertyAddress) {
        id value = modelObject.address;
        if (value != nil) {
            if (builder.address) {
                builder.address = [builder.address mergeWithModel:value initType:PlankModelInitTypeFromSubmerge];
            } else {
                builder.address = value;
            }
        } else {
            builder.address = nil;
        }
    }
    if (modelObject.workCardDirtyProperties.CCWorkCardDirtyPropertyEmail) {
        builder.email = modelObject.email;
    }
    if (modelObject.workCardDirtyProperties.CCWorkCardDirtyPropertyOfficePhone) {
        builder.officePhone = modelObject.officePhone;
    }
}
- (void)setAddress:(CCAddress *)address
{
    _address = address;
    _workCardDirtyProperties.CCWorkCardDirtyPropertyAddress = 1;
}
- (void)setEmail:(NSString *)email
{
    _email = [email copy];
    _workCardDirtyProperties.CCWorkCardDirtyPropertyEmail = 1;
}
- (void)setOfficePhone:(NSString *)officePhone
{
    _officePhone = [officePhone copy];
    _workCardDirtyProperties.CCWorkCardDirtyPropertyOfficePhone = 1;
}
@end
